// Example of pattern matching in Prism

// Function to classify confidence levels
fn classify_confidence(value) ~0.95 {
    match value {
        x ~{0.9, 1.0} => {
            return "Very High";
        },
        x ~{0.7, 0.89} => {
            return "High";
        },
        x ~{0.4, 0.69} => {
            return "Medium";
        },
        x ~{0.0, 0.39} => {
            return "Low";
        },
    }
}

// Function to analyze data with context-aware pattern matching
fn analyze_data(data, context) ~0.9 {
    match data {
        // Match array with specific confidence patterns
        [x ~{0.8, 1.0}, y, z ~{0.9, 1.0}] => {
            return "Found high confidence pattern";
        },
        
        // Match array with rest pattern
        [x, ...rest] if x > 0.5 => {
            return "First element has sufficient confidence";
        },
        
        // Match in specific context
        in "validation" value ~{0.7, 1.0} => {
            return "Valid in validation context";
        },
        
        // Match with combined patterns
        x & ~{0.6, 0.8} | y & ~{0.8, 1.0} => {
            return "Matched combined confidence ranges";
        },
        
        // Default case
        _ => {
            return "No specific pattern matched";
        }
    }
}

// Example usage
let confidence_values = [0.85, 0.6, 0.95];
let classification = classify_confidence(0.82);
print("Confidence classification: " + classification);

// Context-based pattern matching
in "validation" {
    let result = analyze_data(confidence_values, "validation");
    print("Validation analysis: " + result);
}

// Pattern matching with guards
let data_point = 0.75;
match data_point {
    x if x > 0.8 => {
        print("High confidence: " + x);
    },
    x if x > 0.6 => {
        print("Medium confidence: " + x);
    },
    _ => {
        print("Low confidence: " + data_point);
    }
}

// Complex pattern matching example
let validation_results = [
    in "source_a" 0.85,
    in "source_b" 0.92,
    in "source_c" 0.78
];

for result in validation_results {
    match result {
        in "source_a" x ~{0.8, 1.0} => {
            print("Source A passed with high confidence: " + x);
        },
        in "source_b" x ~{0.9, 1.0} => {
            print("Source B passed with very high confidence: " + x);
        },
        in ctx x if x > 0.7 => {
            print("Other source " + ctx + " passed with confidence: " + x);
        },
        _ => {
            print("Source failed confidence check");
        }
    }
} 