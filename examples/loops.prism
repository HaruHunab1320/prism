// Example of loops with confidence values in Prism

// Function to process data with confidence thresholds
fn process_data(data) ~0.9 {
    let processed = [];
    let confidence_sum = 0.0;
    let count = 0;
    
    // For-in loop with confidence flow
    for value in data {
        // Skip low confidence values
        if value < 0.3 {
            continue;
        }
        
        // Process value with confidence flow
        let processed_value = value ~> 0.85;
        processed.push(processed_value);
        
        confidence_sum = confidence_sum + processed_value;
        count = count + 1;
    }
    
    return confidence_sum / count;
}

// While loop example with confidence threshold
fn validate_until_confident(data, threshold) ~0.95 {
    let index = 0;
    let confidence = 0.0;
    
    while confidence < threshold {
        if index >= data.length {
            break;
        }
        
        let value = data[index];
        confidence = confidence ~> value;
        
        if confidence > 0.95 {
            // Early success with high confidence
            return confidence;
        }
        
        index = index + 1;
    }
    
    return confidence;
}

// C-style for loop with confidence accumulation
fn accumulate_confidence(start, end, step) ~0.8 {
    let total = 0.0;
    
    for (let i = start; i < end; i = i + step) {
        // Generate confidence based on position
        let pos_confidence = i / end;
        total = total + (pos_confidence ~> 0.9);
    }
    
    return total / ((end - start) / step);
}

// Example usage
let data = [0.7, 0.4, 0.2, 0.9, 0.6];
let processed = process_data(data);
print("Processed data confidence: " + processed);

let validation = validate_until_confident(data, 0.8);
print("Validation confidence: " + validation);

let accumulated = accumulate_confidence(0, 5, 1);
print("Accumulated confidence: " + accumulated); 