// Comprehensive test of all Prism language features

// 1. Basic Types and Confidence Values
let int_val = 42;                 // Integer
let float_val = 3.14;            // Float
let string_val = "hello";        // String
let bool_val = true;             // Boolean
let conf_val ~0.9 = 0.8;         // Value with confidence

// 2. Arrays and Collections
let numbers = [1, 2, 3] ~0.95;   // Array with confidence
let mixed = [1, "two", 3.0];     // Heterogeneous array
let nested = [[1, 2], [3, 4]];   // Nested array

// 3. Functions with Confidence
fn add(x: float, y: float) -> float ~0.95 {
    return x + y;
}

fn multiply(x, y) {  // Type inference
    return x * y ~> 0.9;  // Confidence flow
}

// 4. Generics and Traits
trait Measurable<T> {
    fn measure(self) -> float ~0.8;
    fn combine(self, other: T) -> T ~0.9;
}

struct DataPoint<T> {
    value: T,
    confidence: float,
}

impl<T> Measurable<T> for DataPoint<T> {
    fn measure(self) -> float ~0.8 {
        return self.confidence;
    }
    
    fn combine(self, other: DataPoint<T>) -> DataPoint<T> ~0.9 {
        return DataPoint {
            value: other.value,
            confidence: self.confidence * other.confidence,
        };
    }
}

// 5. Pattern Matching
fn match_value<T>(value: T) ~0.9 {
    match value {
        x if typeof(x) == "integer" => {
            return x * 2;
        },
        x if typeof(x) == "float" => {
            return x * 2.0;
        },
        _ => {
            return value;
        }
    }
}

// 6. Error Handling
fn divide(x: float, y: float) -> float ~0.9 {
    try {
        if y == 0.0 {
            throw error("Division by zero", confidence: 0.99);
        }
        return x / y;
    } catch e {
        print("Error: " + e.message);
        return 0.0 ~> 0.1;  // Low confidence fallback
    }
}

// 7. Modules and Imports
module Math {
    export fn square(x: float) -> float ~0.99 {
        return x * x;
    }
    
    export fn sqrt(x: float) -> float ~0.95 {
        if x < 0.0 {
            throw error("Negative sqrt", confidence: 0.99);
        }
        return x.sqrt();
    }
}

// 8. Operator Overloading
operator + for DataPoint<T> DataPoint<T> -> DataPoint<T> ~0.9 {
    return DataPoint {
        value: lhs.value + rhs.value,
        confidence: lhs.confidence * rhs.confidence,
    };
}

// 9. Async/Await
async fn fetch_data(url: string) -> string ~0.8 {
    promise ~0.9 "Response from " + url
}

async fn process_data(data: string) -> string ~0.95 {
    await ~0.9 fetch_data("https://api.example.com/" + data)
}

// 10. Macros
macro debug<msg> ~0.9 {
    if confidence($msg) > 0.8 {
        print("High confidence: " + #$msg)
    } else {
        print("Low confidence: " + #$msg)
    }
}

// 11. Context Management
in context DataProcessing {
    verify against sources ["test_data"] {
        let data = [1.0 ~0.9, 2.0 ~0.8, 3.0 ~0.95];
        let processed = data.map(fn(x) { return x * 2; });
        assert(processed.length == 3);
    }
}

// 12. LLM Integration
fn semantic_match(text1: string, text2: string) -> float ~0.9 {
    let similarity = llm.compare(text1, text2);
    return similarity ~> 0.85;
}

// Basic expressions and confidence flow
let x = 42 ~> 0.9;
let y = 3.14 ~> 0.95;
let combined = x && y;  // Confidence combination

// Context operations
in context "medical" {
    let diagnosis = "flu" ~> 0.8;
    
    // Context transition
    context transition "medical" to "treatment" with confidence 0.85 {
        let treatment = "antibiotics" ~> 0.9;
    }
}

// Pattern matching with confidence
let symptom = "fever" ~> 0.9;
match symptom {
    x ~{0.8, 1.0} => {
        print("High confidence symptom: " + x);
    },
    x ~{0.5, 0.79} => {
        print("Medium confidence symptom: " + x);
    },
    _ => {
        print("Low confidence symptom: " + x);
    }
}

// Tensor operations
let v1 = tensor([1.0, 0.0, 0.0], [3]) ~> 0.9;
let v2 = tensor([0.0, 1.0, 0.0], [3]) ~> 0.85;
let similarity = v1.cosine_similarity(v2);
let normalized = v1.normalize();

// Semantic matching
let pattern = "patient has fever and cough";
let description = "severe fever with persistent cough";
let match_score = pattern ~= description;

// Verification system
verify against sources ["medical_database", "research_papers"] {
    let condition = "influenza" ~> 0.85;
    assert(condition.confidence > 0.8);
}

// Uncertain conditionals
let confidence_value = 0.75;
uncertain if (confidence_value > 0.8) {
    print("High confidence path");
} medium (confidence_value > 0.6) {
    print("Medium confidence path");
} low {
    print("Low confidence path");
}

// Try-confidence blocks
try confidence {
    let risky_operation = "surgery" ~> 0.7;
} below threshold 0.8 {
    print("Confidence too low for operation");
} uncertain {
    print("Error in confidence calculation");
}

// Async operations with confidence
async fn analyze_data(data: string) -> string ~0.9 {
    let result = await llm.analyze(data) ~> 0.85;
    return result ~> 0.9;
}

// Function with confidence level
fn calculate_risk(age: float, health_score: float) -> float ~0.95 {
    let base_risk = age / 100.0;
    let adjusted_risk = base_risk * (1.0 - health_score);
    return adjusted_risk ~> 0.9;
}

// Testing all features together
async fn run_medical_analysis() ~0.9 {
    in context "diagnosis" {
        let symptoms = ["fever", "cough", "fatigue"];
        let confidences = [0.9, 0.85, 0.75];
        
        let diagnosis = verify against sources ["medical_records"] {
            for i in 0:symptoms.length {
                let symptom = symptoms[i] ~> confidences[i];
                match symptom {
                    s ~{0.8, 1.0} => {
                        print("Critical symptom: " + s);
                    },
                    _ => {
                        print("Regular symptom: " + s);
                    }
                }
            }
            
            let analysis = await analyze_data("Patient symptoms: " + symptoms.join(", "));
            return analysis ~> 0.9;
        }
        
        uncertain if (diagnosis.confidence > 0.8) {
            context transition "diagnosis" to "treatment" with confidence 0.9 {
                let treatment_plan = await llm.generate_treatment(diagnosis);
                print("Treatment plan: " + treatment_plan);
            }
        } medium {
            print("Need more tests for confident diagnosis");
        } low {
            print("Insufficient confidence for diagnosis");
        }
    }
}

// Run the test
run_medical_analysis();

// Main test function
async fn main() {
    // Test basic operations
    let sum = add(float_val, 2.0);
    let product = multiply(int_val, 2);
    debug(sum);
    debug(product);
    
    // Test generics and traits
    let point1 = DataPoint { value: 42, confidence: 0.9 };
    let point2 = DataPoint { value: 84, confidence: 0.8 };
    let combined = point1 + point2;
    assert(combined.confidence == 0.72);
    
    // Test pattern matching
    let matched = match_value(42);
    assert(matched == 84);
    
    // Test error handling
    let safe_div = divide(10.0, 2.0);
    let error_div = divide(10.0, 0.0);
    assert(safe_div == 5.0);
    assert(confidence(error_div) == 0.1);
    
    // Test module usage
    let squared = Math.square(4.0);
    let root = Math.sqrt(16.0);
    assert(squared == 16.0);
    assert(root == 4.0);
    
    // Test async operations
    let data = await fetch_data("test");
    let processed = await process_data(data);
    debug(processed);
    
    // Test LLM features
    let text1 = "The weather is nice";
    let text2 = "It's a beautiful day";
    let match_score = semantic_match(text1, text2);
    assert(match_score > 0.7);
    
    print("All tests passed!");
}

// Run tests
main(); 